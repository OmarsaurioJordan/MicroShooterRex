<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>tipo = 0; // ind de sprite boton
foco = false; // true para escribir en el
texto = ""; // texto escrito
activo = true;
alarm[0] = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ini_open("config.ini");
texto = ini_read_string("boton" + string(tipo), "texto", "");
activo = ini_read_string("boton" + string(tipo), "activo", "1") == "1";
ini_close();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if mouse_check_button_pressed(mb_left) {
if point_distance(x, y, mouse_x, mouse_y) &lt; 40 {
switch tipo {
    case m_boton_nombre:
    case m_boton_ip:
        foco = true;
        break;
    case m_boton_pelo1:
        o_menu.pelo--;
        if o_menu.pelo &lt; 0 {
            o_menu.pelo = sprite_get_number(d_pelo) - 1; }
        break;
    case m_boton_pelo2:
        o_menu.pelo++;
        if o_menu.pelo &gt; sprite_get_number(d_pelo) - 1 {
            o_menu.pelo = 0; }
        break;
    case m_boton_grupo1:
        o_menu.grupo--;
        if o_menu.grupo &lt; 0 {
            o_menu.grupo = m_grupos - 1; }
        break;
    case m_boton_grupo2:
        o_menu.grupo++;
        if o_menu.grupo &gt; m_grupos - 1 {
            o_menu.grupo = 0; }
        break;
    case m_boton_servidor:
        if file_exists("mi_mapa.png") {
            file_delete("mi_mapa.png"); }
        servidor = true;
        o_menu.alarm[0] = 1;
        break;
    case m_boton_servifoto:
        if window_get_fullscreen() {
            window_set_fullscreen(false); }
        else {
            var fil = get_open_filename("IMAGE|*.png;*.jpg;*.jpeg", "");
            if fil != "" {
                var spr = sprite_add(fil, 1, false, false, 0, 0);
                sprite_save(spr, 0, "mi_mapa.png");
                sprite_delete(spr);
                servidor = true;
                o_menu.alarm[0] = 1;
            }
        }
        break;
    case m_boton_cliente:
        servidor = false;
        o_menu.alarm[1] = 1;
        break;
    case m_boton_masg:
        url_open("https://www.dropbox.com/sh/plhbo1ornjah8jb/AAAOdaSe5JArLE1XRo--Eh_7a?dl=0");
        break;
    case m_boton_cerrar:
        game_end();
        break;
    case m_boton_full:
        window_set_fullscreen(!window_get_fullscreen());
        break;
    case m_boton_zombie:
    case m_boton_bandera:
    case m_boton_regalos:
    case m_boton_pirata:
    case m_boton_fuerte:
    case m_boton_otro:
        activo = !activo;
        break;
    case m_boton_genero:
        if o_menu.genero == 0 { o_menu.genero = 1; }
        else { o_menu.genero = 0; }
        break;
    case m_boton_sonido:
        var gn = audio_get_master_gain(0);
        gn += 0.2;
        if gn &gt; 1 { gn = 0; }
        audio_set_master_gain(0, gn);
        break;
} } }

if foco {
if keyboard_check_pressed(vk_anykey) {
    var tot = string_length(texto);
    if keyboard_key == vk_delete {
        texto = ""; }
    else if keyboard_key == vk_backspace {
        if tot &gt; 1 {
            texto = string_copy(texto, 1, tot - 1); }
        else {
            texto = ""; }
    }
    else {
        var sif = keyboard_check(vk_shift);
        switch tipo {
            case m_boton_nombre:
                if tot &lt; 12 {
                    switch keyboard_key {
                        case ord('0'): case vk_numpad0: texto += "0"; break;
                        case ord('1'): case vk_numpad1: texto += "1"; break;
                        case ord('2'): case vk_numpad2: texto += "2"; break;
                        case ord('3'): case vk_numpad3: texto += "3"; break;
                        case ord('4'): case vk_numpad4: texto += "4"; break;
                        case ord('5'): case vk_numpad5: texto += "5"; break;
                        case ord('6'): case vk_numpad6: texto += "6"; break;
                        case ord('7'): case vk_numpad7: texto += "7"; break;
                        case ord('8'): case vk_numpad8: texto += "8"; break;
                        case ord('9'): case vk_numpad9: texto += "9"; break;
                        case ord('A'): if sif { texto += "A"; } else { texto += "a"; } break;
                        case ord('B'): if sif { texto += "B"; } else { texto += "b"; } break;
                        case ord('C'): if sif { texto += "C"; } else { texto += "c"; } break;
                        case ord('D'): if sif { texto += "D"; } else { texto += "d"; } break;
                        case ord('E'): if sif { texto += "E"; } else { texto += "e"; } break;
                        case ord('F'): if sif { texto += "F"; } else { texto += "f"; } break;
                        case ord('G'): if sif { texto += "G"; } else { texto += "g"; } break;
                        case ord('H'): if sif { texto += "H"; } else { texto += "h"; } break;
                        case ord('I'): if sif { texto += "I"; } else { texto += "i"; } break;
                        case ord('J'): if sif { texto += "J"; } else { texto += "j"; } break;
                        case ord('K'): if sif { texto += "K"; } else { texto += "k"; } break;
                        case ord('L'): if sif { texto += "L"; } else { texto += "l"; } break;
                        case ord('M'): if sif { texto += "M"; } else { texto += "m"; } break;
                        case ord('N'): if sif { texto += "N"; } else { texto += "n"; } break;
                        case ord('O'): if sif { texto += "O"; } else { texto += "o"; } break;
                        case ord('P'): if sif { texto += "P"; } else { texto += "p"; } break;
                        case ord('Q'): if sif { texto += "Q"; } else { texto += "q"; } break;
                        case ord('R'): if sif { texto += "R"; } else { texto += "r"; } break;
                        case ord('S'): if sif { texto += "S"; } else { texto += "s"; } break;
                        case ord('T'): if sif { texto += "T"; } else { texto += "t"; } break;
                        case ord('U'): if sif { texto += "U"; } else { texto += "u"; } break;
                        case ord('V'): if sif { texto += "V"; } else { texto += "v"; } break;
                        case ord('W'): if sif { texto += "W"; } else { texto += "w"; } break;
                        case ord('X'): if sif { texto += "X"; } else { texto += "x"; } break;
                        case ord('Y'): if sif { texto += "Y"; } else { texto += "y"; } break;
                        case ord('Z'): if sif { texto += "Z"; } else { texto += "z"; } break;
                    }
                }
                break;
            case m_boton_ip:
                if tot &lt; 24 {
                    switch keyboard_key {
                        case ord('0'): case vk_numpad0: texto += "0"; break;
                        case ord('1'): case vk_numpad1: texto += "1"; break;
                        case ord('2'): case vk_numpad2: texto += "2"; break;
                        case ord('3'): case vk_numpad3: texto += "3"; break;
                        case ord('4'): case vk_numpad4: texto += "4"; break;
                        case ord('5'): case vk_numpad5: texto += "5"; break;
                        case ord('6'): case vk_numpad6: texto += "6"; break;
                        case ord('7'): case vk_numpad7: texto += "7"; break;
                        case ord('8'): case vk_numpad8: texto += "8"; break;
                        case ord('9'): case vk_numpad9: texto += "9"; break;
                        case vk_space: if sif { texto += ":"; } else { texto += "."; } break;
                        case vk_decimal: texto += "."; break;
                        case vk_enter: case vk_add: texto += ":"; break;
                    }
                }
                break;
        }
    }
} }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ini_open("config.ini");
ini_write_string("boton" + string(tipo), "texto", texto);
ini_write_string("boton" + string(tipo), "activo", string(activo));
ini_close();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ini_open("config.ini");
ini_write_string("boton" + string(tipo), "texto", texto);
ini_write_string("boton" + string(tipo), "activo", string(activo));
ini_close();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var esc = 1;
if point_distance(x, y, mouse_x, mouse_y) &lt; 40 {
    esc = 1.2; }
if activo {
    draw_sprite_ext(d_boton, tipo, x, y, esc, esc, 0, c_white, 1); }
else {
    draw_sprite_ext(d_boton, tipo, x, y, esc, esc, 0, c_gray, 1); }
draw_set_valign(fa_middle);
draw_set_halign(fa_center);
var txt = texto;
if txt == "" {
    switch tipo {
    case m_boton_nombre:
        txt = "***Player Name***"; break;
    case m_boton_ip:
        txt = "***IP:port***"; break;
    }
}
if foco {
    draw_text_transformed_colour(x, y, txt, 1 + esc, 1 + esc, 0,
        c_red, c_red, c_red, c_red, 1); }
else {
    draw_text_transformed_colour(x, y, txt, 1 + esc, 1 + esc, 0,
        c_black, c_black, c_black, c_black, 1); }
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
