<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// acer conexion UDP persistente
s_globales();
persistent = true;
port = 1023;
do {
    port++;
    conexion = network_create_socket_ext(network_socket_udp, port);
}
until conexion &gt;= 0;

// datos del servidor
sip = "";
sport = 0;

// mantendra la lista de jugadores
jugador = noone;

// para sincronizacion
reloj_control = random(1);
for (var i = 0; i &lt; 4; i++) {
    reloj_server[i] = random(1); }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if room == w_mundo {
    
    // enviar comandos al servidor
    reloj_control -= dt;
    if reloj_control &lt;= 0 {
        reloj_control = 0.1 + random(0.1); // periodo de envio de comandos
        var quien = noone;
        with o_unidad {
            if nombre == o_mundo.nombre {
                quien = id;
                break;
            }
        }
        s_control(quien, true);
    }
    if mouse_check_button_pressed(mb_right) {
        s_udp_tecla(m_udp_cambiarma, 1);
    }
    
    // enviar actualizaciones a los clientes
    if servidor {
        reloj_server[0] -= dt;
        if reloj_server[0] &lt;= 0 {
            reloj_server[0] = 0.1 + random(0.1); // periodo de envio de actualizaciones
            s_udp_unidad(true);
        }
        reloj_server[1] -= dt;
        if reloj_server[1] &lt;= 0 {
            reloj_server[1] = 0.1 + random(0.1); // periodo de envio de actualizaciones
            s_udp_criatura(o_zombie);
        }
        reloj_server[2] -= dt;
        if reloj_server[2] &lt;= 0 {
            reloj_server[2] = 5 + random(1); // periodo de envio de actualizaciones
            s_udp_unidad(false);
        }
        reloj_server[3] -= dt;
        if reloj_server[3] &lt;= 0 {
            reloj_server[3] = 0.1 + random(0.1); // periodo de envio de actualizaciones
            s_udp_criatura(o_campesino);
        }
    }
    
    // modificar variables de los jugadores
    if is_array(jugador) {
        for (var n = 0; n &lt; array_height_2d(jugador); n++) {
            var vie = jugador[n, m_julist_sleep];
            jugador[n, m_julist_sleep] = max(0, vie - dt);
            if vie != 0 and jugador[n, m_julist_sleep] == 0 {
                jugador[n, m_julist_vuelo] = 0;
                jugador[n, m_julist_build] = 0;
                jugador[n, m_julist_expres] = 0;
                jugador[n, m_julist_espacio] = 0;
                jugador[n, m_julist_moused] = 0;
                jugador[n, m_julist_mousei] = 0;
                jugador[n, m_julist_move] = 0;
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var qip = ds_map_find_value(async_load, "ip");
var qport = ds_map_find_value(async_load, "port");
var buf = ds_map_find_value(async_load, "buffer");
buffer_seek(buf, buffer_seek_start, 0);
var tipo = buffer_read(buf, buffer_u8);
switch tipo {
    case m_udp_conexion:
        var gr = buffer_read(buf, buffer_u8);
        var ge = buffer_read(buf, buffer_u8);
        var pe = buffer_read(buf, buffer_u8);
        var nom = buffer_read(buf, buffer_string);
        if version == buffer_read(buf, buffer_string) and !(qip == "127.0.0.1" and
                qport == port) {
            if s_nuevo_jugador(nom, gr, ge, pe, qport, qip) {
                s_crear_unidad(array_height_2d(o_udp.jugador) - 1);
                s_envia_mapa(qport, qip);
            }
        }
        break;
    case m_udp_mapa:
        s_ini_inicio();
        room_set_width(w_mundo, buffer_read(buf, buffer_u16));
        room_set_height(w_mundo, buffer_read(buf, buffer_u16));
        var tot = buffer_read(buf, buffer_u16);
        ini_open("config.ini");
        ini_write_string("mapa", "total", string(tot));
        for (var i = 0; i &lt; tot; i++) {
            ini_write_string("mapa", "m" + string(i), string(buffer_read(buf, buffer_u8))); }
        ini_close();
        room_goto(w_mundo);
        break;
    case m_udp_control:
        var n = s_ind_jugador_ext(qip, qport);
        if n != -1 {
        with o_udp {
            jugador[n, m_julist_sleep] = 5; // resetear reloj de dormir
            jugador[n, m_julist_move] = buffer_read(buf, buffer_u8);
            jugador[n, m_julist_foco] = buffer_read(buf, buffer_u16);
            jugador[n, m_julist_mousei] = buffer_read(buf, buffer_u8);
            jugador[n, m_julist_vuelo] = buffer_read(buf, buffer_u8);
        } }
        break;
    case m_udp_cambiarma:
        var n = s_ind_jugador_ext(qip, qport);
        if n != -1 {
        with o_udp {
            jugador[n, m_julist_moused] = buffer_read(buf, buffer_u8);
        } }
        break;
    case m_udp_unidad:
        var aux;
        if room == w_mundo {
            with o_unidad { visible = false; }
            var tot = buffer_read(buf, buffer_u8);
            for (var i = 0; i &lt; tot; i++) {
                aux = s_find(o_unidad, buffer_read(buf, buffer_u16), true);
                aux.visible = true;
                aux.x = buffer_read(buf, buffer_u16);
                aux.y = buffer_read(buf, buffer_u16);
                aux.z = buffer_read(buf, buffer_u16);
                aux.estarma = buffer_read(buf, buffer_u8);
                aux.enaire = buffer_read(buf, buffer_u8) / 255;
                aux.vida = buffer_read(buf, buffer_u8) / 255;
                aux.energia = buffer_read(buf, buffer_u8) / 255;
                aux.hambre = buffer_read(buf, buffer_u8) / 255;
                aux.armadura = buffer_read(buf, buffer_u8) / 255;
                aux.blindaje = buffer_read(buf, buffer_u8) / 255;
                aux.escudo = buffer_read(buf, buffer_u8) / 255;
                aux.espada = buffer_read(buf, buffer_u8) / 255;
                aux.municion = buffer_read(buf, buffer_u8) / 255;
            }
        }
        break;
    case m_udp_estilo:
        var aux;
        if room == w_mundo {
            var tot = buffer_read(buf, buffer_u8);
            for (var i = 0; i &lt; tot; i++) {
                aux = s_find(o_unidad, buffer_read(buf, buffer_u16), true);
                aux.genero = buffer_read(buf, buffer_u8);
                aux.pelo = buffer_read(buf, buffer_u8);
                aux.grupo = buffer_read(buf, buffer_u8);
                aux.nombre = buffer_read(buf, buffer_string);
            }
        }
        break;
    case m_udp_zombie:
    case m_udp_campesino:
        var aux;
        if room == w_mundo {
            var quien;
            switch tipo {
                case m_udp_zombie: quien = o_zombie; break;
                case m_udp_campesino: quien = o_campesino; break;
            }
            with quien { visible = false; }
            var tot = buffer_read(buf, buffer_u16);
            for (var i = 0; i &lt; tot; i++) {
                aux = s_find(quien, buffer_read(buf, buffer_u16), true);
                aux.visible = true;
                aux.genero = buffer_read(buf, buffer_u8);
                aux.x = buffer_read(buf, buffer_u16);
                aux.y = buffer_read(buf, buffer_u16);
            }
        }
        break;
    case m_udp_creabala:
        if room == w_mundo {
            var xx = buffer_read(buf, buffer_u16);
            var yy = buffer_read(buf, buffer_u16);
            var aux = instance_create(xx, yy, o_bala);
            aux.direction = buffer_read(buf, buffer_u16);
            aux.grupo = buffer_read(buf, buffer_u16);
            aux.idweb = buffer_read(buf, buffer_u16);
        }
        break;
    case m_udp_elibala:
        if room == w_mundo {
            var aux = s_find(o_bala, buffer_read(buf, buffer_u16), false);
            if aux != noone {
                with aux { instance_destroy(); }
            }
        }
        break;
    case m_udp_finespada:
        if room == w_mundo {
            var aux = s_find(o_espada, buffer_read(buf, buffer_u16), false);
            if aux != noone {
                with aux { instance_destroy(); }
            }
        }
        break;
    case m_udp_espada:
        if room == w_mundo {
            var ind = buffer_read(buf, buffer_u16);
            var aux = s_find(o_espada, ind, false);
            if aux != noone {
                var garbage = buffer_read(buf, buffer_u16);
                garbage = buffer_read(buf, buffer_u16);
            }
            else {
                var xx = buffer_read(buf, buffer_u16);
                var yy = buffer_read(buf, buffer_u16);
                aux = instance_create(xx, yy, o_espada);
                aux.idweb = ind;
            }
            aux.mx = buffer_read(buf, buffer_u16);
            aux.my = buffer_read(buf, buffer_u16);
            aux.grupo = buffer_read(buf, buffer_u16);
            aux.reloj_fin = buffer_read(buf, buffer_u16);
            aux.espada = buffer_read(buf, buffer_u16) / 4;
        }
        break;
}
buffer_delete(buf);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>network_destroy(conexion);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
