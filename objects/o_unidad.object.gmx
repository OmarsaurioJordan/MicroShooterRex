<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>o_soldado</parentName>
  <maskName>d_coli1</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// variables basicas del individuo
x += random_range(-1, 1);
y += random_range(-1, 1);
z = 0;
masa = 70;
velocidad = 250;
foco = random(360);
nombre = "";
s_unicoid(id); // crea variable idweb
genero = choose(0, 1);
pelo = irandom(sprite_get_number(d_pelo) - 1);
grupo = irandom(m_grupos - 1);

// para dibujado y sincronizacion LAN
xi = x;
yi = y;
zi = z;
depth = -yi;

// auxiliares de fisicas y ejecucion
antesuelo_x = x;
antesuelo_y = y;
antecolision = true;
estarma = choose(m_estarma_espada, m_estarma_arma);
enaire = 0;

// variables para animacion oscilante y otras
for (var i = 6; i &gt; -1; i--) {
    reloj_anima[i] = random(1);
    anima[i] = 0; // 0:cuerpo, 1:cabeza, 2-4:manoi, 3-5:manod, 6:pies
}
reloj_anihelice = random(1);
anihelice = irandom(3);
reloj_rojo = 0; // para ver impacto rojizo
reloj_cadencia = 0;

// variables de parametros e items
vida = 1;
energia = 1;
hambre = 1;
armadura = 1;
blindaje = 1;
escudo = 1;
espada = 1;
municion = 1;
puntos = 0;

// objetos que sostiene
bandera = 0;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// animaciones
s_anima(id, 0, 2.5, 4, 0); // cuerpo
s_anima(id, 1, 2.1, 3, 0); // cabeza
s_anima(id, 2, 1.6, 2, 0); // manoi x
s_anima(id, 3, 1.6, 2, 0); // manod x
s_anima(id, 4, 1.8, 6, 0); // manoi y
s_anima(id, 5, 1.8, 6, 0); // manod y
s_anima(id, 6, 0.6, 4, 4); // pies
reloj_anihelice -= dt;
if reloj_anihelice &lt;= 0 {
    reloj_anihelice = 0.1;
    anihelice++;
    if anihelice &gt;= 4 { anihelice = 0; }
}

// inteligencia artificial
if servidor {
    s_colision(id);
    s_manual(id);
    s_previene_escape(id, enaire &lt; 0.5);
    // consumir recursos
    hambre = max(0, hambre - 0.002 * dt); // consumo pasivo de comida
    var rege = 0.3 * dt; // velocidad de regeneracion
    if vida &lt;= 1 - rege {
        if hambre &gt;= 0.5 + rege { // no tocar
            hambre -= rege;
            vida += rege;
        }
    }
    if hambre == 0 {
        vida = max(0, vida - 0.05 * dt); // damage por hambre
        if vida == 0 {
            // morir de hambre
        }
    }
    if enaire &gt;= 0.5 {
        energia = max(0, energia - 0.1 * dt); // consumo energia al volar
        if energia == 0 {
            enaire = 0;
        }
    }
    if reloj_cadencia != 0 {
        reloj_cadencia = max(0, reloj_cadencia - dt);
    }
}
else if nombre == o_mundo.nombre {
    s_semimanual(id);
}

// sincronizar con lo visual
s_sincroniza_xyz(id);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// colores a aplicar
var cpiel = merge_colour(make_colour_rgb(250, 240, 230), make_colour_rgb(240, 190, 160), hambre);
var cvivo = s_colorgrupo(grupo);
var copaco = merge_colour(cvivo, c_dkgray, 0.333);
var cbrilla = merge_colour(cvivo, c_white, 0.5);
if reloj_rojo != 0 { // golpeado
    cpiel = merge_colour(cpiel, c_red, 0.5);
    cvivo = merge_colour(cvivo, c_red, 0.5);
    copaco = merge_colour(copaco, c_red, 0.5);
    cbrilla = merge_colour(cbrilla, c_red, 0.5); }

// sombra
if s_mizona(xi, yi) {
    draw_sprite(d_sombra, 3, xi, yi); }

// espalda
if bandera != 0 {
    draw_sprite_ext(d_bandera, 0, xi, yi - zi - anima[0], 1, 1, 0, copaco, 1);
    draw_sprite_ext(d_bandera, 1, xi, yi - zi - anima[0], 1, 1, 0,
        s_colorgrupo(bandera - 1), 1); }
switch estarma {
case m_estarma_espada:
case m_estarma_lanza:
    draw_sprite_ext(d_arma, 0, xi, yi - zi - anima[0], 1, 1, 0, copaco, 1);
    break;
case m_estarma_arma:
    if espada != 0 {
        draw_sprite_ext(d_espada, 1, xi, yi - zi - anima[0], 1, 1, 0, cbrilla, 1); }
    break;
}
draw_sprite_ext(d_espada, 0, xi, yi - zi - anima[0], 1, 1, 0, cvivo, 1);
if enaire &lt; 0.5 {
    //draw_sprite_ext(d_helice, 4, xi, yi - zi - anima[0], 1, 1, 0,
        //merge_colour(copaco, cbrilla, energia), 1);
}

// pies
if enaire &gt;= 0.5 {
    draw_sprite_ext(d_helice, anihelice, xi, yi - zi - anima[0], 1, 1, 0,
        merge_colour(copaco, cbrilla, energia), 1);
    draw_sprite_ext(d_unidad, 6, xi - 11, yi - zi - 10 - anima[0], 1, 1, 0, cpiel, 1);
    draw_sprite_ext(d_unidad, 6, xi + 14, yi - zi - 10 - anima[0], 1, 1, 0, cpiel, 1);
    draw_sprite_ext(d_vestido, 1, xi - 11, yi - zi - 10 - anima[0], 1, 1, 0, cvivo, 1);
    draw_sprite_ext(d_vestido, 1, xi + 14, yi - zi - 10 - anima[0], 1, 1, 0, cvivo, 1);
}
else if point_distance(x, y, xi, yi) &gt; 4 {
    draw_sprite_ext(d_unidad, 6, xi - 9, yi - zi - anima[6], 1, 1, 0, cpiel, 1);
    draw_sprite_ext(d_unidad, 6, xi + 12, yi - zi - 8 + anima[6], 1, 1, 0, cpiel, 1);
    draw_sprite_ext(d_vestido, 1, xi - 9, yi - zi - anima[6], 1, 1, 0, cvivo, 1);
    draw_sprite_ext(d_vestido, 1, xi + 12, yi - zi - 8 + anima[6], 1, 1, 0, cvivo, 1);
}
else {
    draw_sprite_ext(d_unidad, 6, xi - 9, yi - zi, 1, 1, 0, cpiel, 1);
    draw_sprite_ext(d_unidad, 6, xi + 12, yi - zi, 1, 1, 0, cpiel, 1);
    draw_sprite_ext(d_vestido, 1, xi - 9, yi - zi, 1, 1, 0, cvivo, 1);
    draw_sprite_ext(d_vestido, 1, xi + 12, yi - zi, 1, 1, 0, cvivo, 1);
}

// cuerpo
draw_sprite_ext(d_unidad, 1 + genero, xi, yi - zi - anima[0], 1, 1, 0, cpiel, 1);
draw_sprite_ext(d_vestido, 2 + genero, xi, yi - zi - anima[0], 1, 1, 0, cvivo, 1);
if armadura != 0 {
    draw_sprite_ext(d_armadura, clamp(floor(armadura * 4), 0, 3) + genero * 4,
        xi, yi - zi - anima[0], 1, 1, 0, cvivo, 1); }
if blindaje != 0 {
    draw_sprite_ext(d_blindaje, clamp(floor(blindaje * 4), 0, 3),
        xi, yi - zi - anima[0], 1, 1, 0, copaco, 1); }

// cabeza
draw_sprite_ext(d_unidad, 0, xi, yi - zi - anima[0] - anima[1], 1, 1, 0, cpiel, 1);
draw_sprite_ext(d_pelo, pelo, xi, yi - zi - anima[0] - anima[1], 1, 1, 0, cvivo, 1);

// mano izquierda
if escudo == 0 {
    //draw_sprite_ext(d_unidad, 7, xi - anima[2], yi - zi - anima[0] - anima[4], 1, 1, 0, cpiel, 1);
}
else {
    draw_sprite_ext(d_escudo, clamp(floor(escudo * 4), 0, 3),
        xi - anima[2], yi - zi - anima[0] - anima[4], 1, 1, 0, cbrilla, 1); }

// mano derecha
switch estarma {
case m_estarma_espada:
    if espada == 0 {
        draw_sprite_ext(d_unidad, 8, xi + anima[3], yi - zi - anima[0] - anima[5], 1, 1, 0, cpiel, 1); }
    else {
        draw_sprite_ext(d_espada, 3 + clamp(floor(espada * 4), 0, 3),
            xi + anima[3], yi - zi - anima[0] - anima[5], 1, 1, 0, cbrilla, 1); }
    break;
case m_estarma_lanza:
    //draw_sprite_ext(d_unidad, 8, xi + anima[3], yi - zi - anima[0] - anima[5], 1, 1, 0, cpiel, 1);
    break;
case m_estarma_arma:
    draw_sprite_ext(d_arma, 1 + clamp(floor(municion * 8), 0, 7),
        xi + anima[3], yi - zi - anima[0] - anima[5], 1, 1, 0, copaco, 1);
    break;
}

// dibujar nombre
draw_set_valign(fa_bottom);
draw_set_halign(fa_center);
draw_text_transformed_colour(xi, yi - zi - 100, nombre, 0.8, 0.8, 0,
    c_dkgray, c_dkgray, c_dkgray, c_dkgray, 1);

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
