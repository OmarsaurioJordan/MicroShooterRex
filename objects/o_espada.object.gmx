<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>o_dibujable</parentName>
  <maskName>d_coli0</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>s_unicoid(id); // crea variable idweb
direction = random(360);
depth = -y;
reloj_fin = 1; // tiempo para regresar en s
grupo = m_grupo_hostil;
espada = 1;
oriori = noone; // id de jugador en servidor
origen = -1;  // ind de jugador en servidor o -1 si no jugador
mx = x;
my = y;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if servidor {
    reloj_fin = max(0, reloj_fin - dt);
    var envio = false;
    if reloj_fin == 0 {
        // regresar al origen
        if instance_exists(oriori) {
            direction = point_direction(x, y, oriori.x, oriori.y);
            var vvv = min(point_distance(x, y, oriori.x, oriori.y), 300 * dt);
            x += lengthdir_x(vvv, direction);
            y += lengthdir_y(vvv, direction);
            if place_meeting(x, y, oriori) {
                oriori.estarma = m_estarma_espada;
                oriori.espada = espada;
                s_udp_evento(m_udp_finespada, x, y, 3, idweb,
                    -1, -1, -1, -1, -1, -1, -1);
                instance_destroy();
                exit;
            }
        }
        else {
            s_udp_evento(m_udp_finespada, x, y, 3, idweb,
                -1, -1, -1, -1, -1, -1, -1);
            instance_destroy();
            exit;
        }
    }
    else {
        // andar y rebotar o golpear
        var otro;
        var vvv = 500 * dt;
        var ddd = point_distance(x, y,
            x + lengthdir_x(vvv, direction), y + lengthdir_y(vvv, direction));
        var paso = ddd / max(1, ceil(ddd / 10));
        for (var i = 0; i &lt; ceil(ddd / 10); i++) {
            x += lengthdir_x(paso, direction);
            y += lengthdir_y(paso, direction);
            otro = instance_place(x, y, o_solido);
            if otro != noone {
                envio = true;
                direction = point_direction(otro.x, otro.y, x, y);
            }
            else {
                otro = instance_place(x, y, o_movil);
                if otro != noone {
                    if otro.grupo != grupo and !(grupo &lt; m_grupos and
                            otro.object_index == o_campesino) {
                        
                        // $ hacer damage
                        
                        envio = true;
                        reloj_fin = 0;
                    }
                }
            }
        }
    }
    if envio {
        mx = round(x + lengthdir_x(1000, direction));
        my = round(y + lengthdir_y(1000, direction));
        if reloj_fin == 0 {
            s_udp_evento(m_udp_espada, x, y, 3,
                idweb, round(x), round(y), mx, my, grupo, 0,
                clamp(floor(espada * 4), 0, 3)); }
        else {
            s_udp_evento(m_udp_espada, x, y, 3,
                idweb, round(x), round(y), mx, my, grupo, 1,
                clamp(floor(espada * 4), 0, 3)); }
    }
}
// sincronizacion visual
else {
    var ddd = point_direction(x, y, mx, my);
    var vvv = min(point_distance(x, y, mx, my), 500 * dt);
    x += lengthdir_x(vvv, ddd);
    y += lengthdir_y(vvv, ddd);
}
depth = -y;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_sprite(d_sombra, 1, x, y);
var cbrilla = merge_colour(s_colorgrupo(grupo), c_white, 0.5);
if reloj_fin != 0 {
    draw_sprite_ext(d_espada, 7 + clamp(floor(espada * 4), 0, 3), x, y - 50, 1, 1,
        direction + 90, cbrilla, 1); }
else {
    draw_sprite_ext(d_espada, 13 + clamp(floor(espada * 4), 0, 3), x, y - 50, 1, 1,
        direction + 90, cbrilla, 1); }
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
